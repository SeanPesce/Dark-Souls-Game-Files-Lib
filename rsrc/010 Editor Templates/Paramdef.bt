//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: Dark Souls .PARAMDEF (Parameter Definition File)
// Author: Jed "Nyxojaele" Lang
// Revision: 1
//--------------------------------------
#ifndef _DS1_PARAMDEF_BT
    #define _DS1_PARAMDEF_BT

#include "Utility.bt"

local uint paramdef_column_count = 0;
    
typedef struct
{
    char JPName[0x40];
    char ExternalType[8];
    char StrFormat[8];
    int Unknown2 <format=hex>;
    float DefaultValue;
    float MaxValue;
    float MinValue;
    int Unknown4 <format=hex>;
    int Size;
    int DescriptionOffset <format=hex>;
    local string DescriptionTmp = "";
    if (DescriptionOffset != 0)
    {
        local int oldPos = FTell();
        FSeek(DescriptionOffset);
        string Description <bgcolor=0xBB9900>;
        DescriptionTmp = Description;
        FSeek(oldPos);
    }
    char InternalType[0x20];
    char ENName[0x20];
    int Unknown7 <format=hex>;
    
    // Print Japanese descriptions as byte arrays (convert to Shift JIS here: https://r12a.github.io/app-encodings/ )
    //PrintStringCharsAsBytes(DescriptionTmp);
    //Printf("00 81 42 7a 5a 7a 81 42 00 "); // Separate each description by ". zZz. " to be parsed as a single line
    
    if (ExternalType[0] == 'f')
    {
        Printf("%d\t%s\t%s\t%s\t%f\t%f\t%f\t%d\n", paramdef_column_count, ENName, ExternalType, InternalType, DefaultValue, MinValue, MaxValue, Size);
    }
    else if (ExternalType[0] == 'u')
    {
        Printf("%d\t%s\t%s\t%s\t%u\t%u\t%u\t%d\n", paramdef_column_count, ENName, ExternalType, InternalType, (uint32)DefaultValue, (uint32)MinValue, (uint32)MaxValue, Size);
    }
    else
    {
        Printf("%d\t%s\t%s\t%s\t%d\t%d\t%d\t%d\n", paramdef_column_count, ENName, ExternalType, InternalType, (int32)DefaultValue, (int32)MinValue, (int32)MaxValue, Size);
    }
    
    paramdef_column_count++;
} ColumnStruct <read=ReadColumnStruct>;
string ReadColumnStruct(ColumnStruct &cs)
{
    string ret;
    SPrintf(ret, "(%s) %s", cs.ExternalType, cs.ENName);
    return ret;
}

SetBackColor(cGray);
int FileSize;
short ColumnDataOffset <format=hex>;
short Unknown1 <format=hex>;
short ColumnCount;
short Unknown2 <format=hex>;
char Name[0x20];
int Unknown3 <format=hex>;

struct
{
    ColumnStruct Column[ColumnCount] <bgcolor=cLtRed, optimize=false>;
} Columns;

#endif // _DS1_PARAMDEF_BT