//----------------------------------------------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: AesCrypt.bt
// Author: kokke, B3LYP, & Sean Pesce
// Revision: 0.0.1
// Purpose: AES encryption/decryption functions
//----------------------------------------------------------------------------
#ifndef _SP_CRYPTO_AES_BT
    #define _SP_CRYPTO_AES_BT

// Original: https://github.com/kokke/tiny-AES-c

/*
    This is an implementation of the AES algorithm, specifically ECB, CTR and CBC mode.
    Block size can be chosen in aes.h - available choices are AES128, AES192, AES256.
    The implementation is verified against the test vectors in:
      National Institute of Standards and Technology Special Publication 800-38A 2001 ED
    ECB-AES128
    ----------
      plain-text:
        6bc1bee22e409f96e93d7e117393172a
        ae2d8a571e03ac9c9eb76fac45af8e51
        30c81c46a35ce411e5fbc1191a0a52ef
        f69f2445df4f9b17ad2b417be66c3710
      key:
        2b7e151628aed2a6abf7158809cf4f3c
      resulting cipher
        3ad77bb40d7a3660a89ecaf32466ef97 
        f5d3d58503b9699de785895a96fdbaaf 
        43b1cd7f598ece23881b00e3ed030688 
        7b0c785e27e8ad3f8223207104725dd4 
    NOTE:   String length must be evenly divisible by 16byte (str_len % 16 == 0)
            You should pad the end of the string with zeros if this is not the case.
            For AES192/256 the key size is proportionally larger.
*/

#define AES_BLOCKLEN 16 // Block length in bytes AES is 128b block only

typedef enum {
    // Key length in bytes
    AES256_KEY_LEN = 32,
    AES192_KEY_LEN = 24,
    AES128_KEY_LEN = 16
} AES_KEY_LEN;

typedef enum {
    AES256_KEY_EXP_SIZE = 240,
    AES192_KEY_EXP_SIZE = 208,
    AES128_KEY_EXP_SIZE = 176
} AES_KEY_EXP_SIZE;


// Note: Local structs aren't supported in 010 Editor templates
typedef struct(AES_KEY_EXP_SIZE key_exp_size)
{
    ubyte RoundKey[key_exp_size];
    ubyte Iv[AES_BLOCKLEN];
} AES_ctx;


local const ubyte DARK_SOULS_REMASTERED_SAVE_FILE_AES_KEY[AES128_KEY_LEN] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10 }; // CBC, 128
local const ubyte DARK_SOULS_2_SAVE_FILE_AES_KEY[AES128_KEY_LEN] = { 0xB7, 0xFD, 0x46, 0x3E, 0x4A, 0x9C, 0x11, 0x02, 0xDF, 0x17, 0x39, 0xE5, 0xF3, 0xB2, 0xA5, 0x0F }; // CBC, 128
local const ubyte DARK_SOULS_3_SAVE_FILE_AES_KEY[AES128_KEY_LEN] = { 0xFD, 0x46, 0x4D, 0x69, 0x5E, 0x69, 0xA3, 0x9A, 0x10, 0xE3, 0x19, 0xA7, 0xAC, 0xE8, 0xB7, 0xFA }; // CBC, 128


/*****************************************************************************/
/* Defines:                                                                  */
/*****************************************************************************/
// The number of columns comprising a state in AES. This is a constant in AES. Value=4
#define Nb 4

typedef enum {
    // Number of 32 bit words in a key
    AES256_NK = 8,
    AES192_NK = 6,
    AES128_NK = 4
} AES_NK;

typedef enum {
    // Number of rounds in AES Cipher
    AES256_NR = 14,
    AES192_NR = 12,
    AES128_NR = 10
} AES_NR;




/*****************************************************************************/
/* Private variables:                                                        */
/*****************************************************************************/
// state - array holding the intermediate results during decryption.
//typedef ubyte state_t[4][4];
uint state_get_index(ubyte i, ubyte j)
{
    return (i*4)+j;
}
ubyte state_get_value(ubyte state[AES_BLOCKLEN], ubyte i, ubyte j)
{
    return state[state_get_index(i,j)];
}



// The lookup-tables are marked const so they can be placed in read-only storage instead of RAM
// The numbers below can be computed dynamically trading ROM for RAM - 
// This can be useful in (embedded) bootloader applications, where ROM is often limited.
local const ubyte sbox[256] = {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

local const ubyte rsbox[256] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

// The round constant word array, Rcon[i], contains the values given by 
// x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
local const ubyte Rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

/*
 * Jordan Goulder points out in PR #12 (https://github.com/kokke/tiny-AES-C/pull/12),
 * that you can remove most of the elements in the Rcon array, because they are unused.
 *
 * From Wikipedia's article on the Rijndael key schedule @ https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon
 * 
 * "Only the first some of these constants are actually used â€“ up to rcon[10] for AES-128 (as 11 round keys are needed), 
 *  up to rcon[8] for AES-192, up to rcon[7] for AES-256. rcon[0] is not used in AES algorithm."
 */


/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/

ubyte getSBoxValue(ubyte num)
{
  return sbox[num];
}

ubyte getSBoxInvert(ubyte num)
{
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
void KeyExpansion(ubyte RoundKey[], const ubyte key_bytes[], AES_NK Nk)
{
  local uint i, j, k;
  local ubyte tempa[4]; // Used for the column/row operations
  
  local AES_NR Nr = AES128_NR;
  if (Nk == AES256_NK)
  {
      Nr = AES256_NR;
  }
  else if (Nk == AES192_NK)
  {
      Nr = AES192_NR;
  }
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = key_bytes[(i * 4) + 0];
    RoundKey[(i * 4) + 1] = key_bytes[(i * 4) + 1];
    RoundKey[(i * 4) + 2] = key_bytes[(i * 4) + 2];
    RoundKey[(i * 4) + 3] = key_bytes[(i * 4) + 3];
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
  {
    {
      k = (i - 1) * 4;
      tempa[0]=RoundKey[k + 0];
      tempa[1]=RoundKey[k + 1];
      tempa[2]=RoundKey[k + 2];
      tempa[3]=RoundKey[k + 3];

    }

    if (i % Nk == 0)
    {
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
        tempa[3] = k;
      }

      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
    }
    if (Nk == AES256_NK)
    {
        if (i % Nk == 4)
        {
          // Function Subword()
          {
            tempa[0] = getSBoxValue(tempa[0]);
            tempa[1] = getSBoxValue(tempa[1]);
            tempa[2] = getSBoxValue(tempa[2]);
            tempa[3] = getSBoxValue(tempa[3]);
          }
        }
    }
    j = i * 4; k=(i - Nk) * 4;
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
  }
}

void AES_init_ctx(ubyte ctxRoundKey[], const ubyte key_bytes[], AES_NK Nk)
{
  KeyExpansion(ctxRoundKey, key_bytes, Nk);
}
void AES_init_ctx_iv(ubyte ctxRoundKey[], ubyte ctxIv[AES_BLOCKLEN], const ubyte key_bytes[], const ubyte iv[AES_BLOCKLEN], AES_NK Nk)
{
  KeyExpansion(ctxRoundKey, key_bytes, Nk);
  Memcpy(ctxIv, iv, AES_BLOCKLEN);
}
void AES_ctx_set_iv(ubyte ctxIv[AES_BLOCKLEN], const ubyte iv[AES_BLOCKLEN])
{
  Memcpy(ctxIv, iv, AES_BLOCKLEN);
}

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
void AddRoundKey(ubyte round, ubyte state[AES_BLOCKLEN], ubyte RoundKey[])
{
  local ubyte i, j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
    {
      state[state_get_index(i,j)] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
    }
  }
}

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
void SubBytes(ubyte state[AES_BLOCKLEN])
{
  local ubyte i, j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
    {
      state[state_get_index(j,i)] = getSBoxValue(state[state_get_index(j,i)]);
    }
  }
}

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
void ShiftRows(ubyte state[AES_BLOCKLEN])
{
  local ubyte temp;

  // Rotate first row 1 columns to left  
  temp                        = state[state_get_index(0,1)];
  state[state_get_index(0,1)] = state[state_get_index(1,1)];
  state[state_get_index(1,1)] = state[state_get_index(2,1)];
  state[state_get_index(2,1)] = state[state_get_index(3,1)];
  state[state_get_index(3,1)] = temp;

  // Rotate second row 2 columns to left  
  temp                        = state[state_get_index(0,2)];
  state[state_get_index(0,2)] = state[state_get_index(2,2)];
  state[state_get_index(2,2)] = temp;

  temp                        = state[state_get_index(1,2)];
  state[state_get_index(1,2)] = state[state_get_index(3,2)];
  state[state_get_index(3,2)] = temp;

  // Rotate third row 3 columns to left
  temp                        = state[state_get_index(0,3)];
  state[state_get_index(0,3)] = state[state_get_index(3,3)];
  state[state_get_index(3,3)] = state[state_get_index(2,3)];
  state[state_get_index(2,3)] = state[state_get_index(1,3)];
  state[state_get_index(1,3)] = temp;
}

ubyte xtime(ubyte x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
}

// MixColumns function mixes the columns of the state matrix
void MixColumns(ubyte state[AES_BLOCKLEN])
{
  local ubyte i;
  local ubyte Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
  {  
    t   = state[state_get_index(i,0)];
    Tmp = state[state_get_index(i,0)] ^ state[state_get_index(i,1)] ^ state[state_get_index(i,2)] ^ state[state_get_index(i,3)] ;
    Tm  = state[state_get_index(i,0)] ^ state[state_get_index(i,1)] ; Tm = xtime(Tm);  state[state_get_index(i,0)] ^= Tm ^ Tmp ;
    Tm  = state[state_get_index(i,1)] ^ state[state_get_index(i,2)] ; Tm = xtime(Tm);  state[state_get_index(i,1)] ^= Tm ^ Tmp ;
    Tm  = state[state_get_index(i,2)] ^ state[state_get_index(i,3)] ; Tm = xtime(Tm);  state[state_get_index(i,2)] ^= Tm ^ Tmp ;
    Tm  = state[state_get_index(i,3)] ^ t ;                           Tm = xtime(Tm);  state[state_get_index(i,3)] ^= Tm ^ Tmp ;
  }
}

// Multiply is used to multiply numbers in the field GF(2^8)
// Note: The last call to xtime() is unneeded, but often ends up generating a smaller binary
//       The compiler seems to be able to vectorize the operation better this way.
//       See https://github.com/kokke/tiny-AES-c/pull/34
ubyte Multiply(ubyte x, ubyte y)
{
  return (((y & 1) * x) ^
       ((y>>1 & 1) * xtime(x)) ^
       ((y>>2 & 1) * xtime(xtime(x))) ^
       ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
       ((y>>4 & 1) * xtime(xtime(xtime(xtime(x)))))); /* this last call to xtime() can be omitted */
}

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
void InvMixColumns(ubyte state[AES_BLOCKLEN])
{
  local int i;
  local ubyte a, b, c, d;
  for (i = 0; i < 4; ++i)
  { 
    a = state[state_get_index(i,0)];
    b = state[state_get_index(i,1)];
    c = state[state_get_index(i,2)];
    d = state[state_get_index(i,3)];

    state[state_get_index(i,0)] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    state[state_get_index(i,1)] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    state[state_get_index(i,2)] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    state[state_get_index(i,3)] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
  }
}


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
void InvSubBytes(ubyte state[AES_BLOCKLEN])
{
  local ubyte i, j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
    {
      state[state_get_index(j,i)] = getSBoxInvert(state[state_get_index(j,i)]);
    }
  }
}

void InvShiftRows(ubyte state[AES_BLOCKLEN])
{
  local ubyte temp;

  // Rotate first row 1 columns to right  
  temp = state[state_get_index(3,1)];
  state[state_get_index(3,1)] = state[state_get_index(2,1)];
  state[state_get_index(2,1)] = state[state_get_index(1,1)];
  state[state_get_index(1,1)] = state[state_get_index(0,1)];
  state[state_get_index(0,1)] = temp;

  // Rotate second row 2 columns to right 
  temp = state[state_get_index(0,2)];
  state[state_get_index(0,2)] = state[state_get_index(2,2)];
  state[state_get_index(2,2)] = temp;

  temp = state[state_get_index(1,2)];
  state[state_get_index(1,2)] = state[state_get_index(3,2)];
  state[state_get_index(3,2)] = temp;

  // Rotate third row 3 columns to right
  temp = state[state_get_index(0,3)];
  state[state_get_index(0,3)] = state[state_get_index(1,3)];
  state[state_get_index(1,3)] = state[state_get_index(2,3)];
  state[state_get_index(2,3)] = state[state_get_index(3,3)];
  state[state_get_index(3,3)] = temp;
}


// Cipher is the main function that encrypts the PlainText.
void Cipher(ubyte state[AES_BLOCKLEN], ubyte RoundKey[], AES_NR Nr)
{
  local ubyte round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey); 
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
  {
    SubBytes(state);
    ShiftRows(state);
    MixColumns(state);
    AddRoundKey(round, state, RoundKey);
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
  ShiftRows(state);
  AddRoundKey(Nr, state, RoundKey);
}

void InvCipher(ubyte state[AES_BLOCKLEN], ubyte RoundKey[], AES_NR Nr)
{
  local ubyte round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey); 

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
  {
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(round, state, RoundKey);
    InvMixColumns(state);
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
  InvSubBytes(state);
  AddRoundKey(0, state, RoundKey);
}


/*****************************************************************************/
/* Public functions:                                                         */
/*****************************************************************************/

// ECB mode is considered unsafe for most uses and is not implemented in streaming mode.
// If you need this mode, call the function for every block of 16 bytes you need encrypted.
void AES_ECB_encrypt(ubyte ctxRoundKey[], ubyte buf[AES_BLOCKLEN], AES_NR Nr)
{
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher(buf, ctxRoundKey, Nr);
}

void AES_ECB_decrypt(ubyte ctxRoundKey[], ubyte buf[AES_BLOCKLEN], AES_NR Nr)
{
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher(buf, ctxRoundKey, Nr);
}





void XorWithIv(ubyte buf[AES_BLOCKLEN], ubyte Iv[AES_BLOCKLEN])
{
  local ubyte i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
  {
    buf[i] ^= Iv[i];
  }
}

void AES_CBC_encrypt_buffer(ubyte ctxRoundKey[], ubyte ctxIv[AES_BLOCKLEN], ubyte buf[], uint32 length, AES_NR Nr)
{
  if (length % 16 != 0)
  {
    Printf("WARNING: Invalid buffer length (%d). Buffer length should be a multiple of 16.\n", length);
  }
  
  local uint32 i; // uintptr_t
  local ubyte Iv[AES_BLOCKLEN]; Memcpy(Iv, ctxIv, AES_BLOCKLEN);
  local ubyte buf_tmp[AES_BLOCKLEN]; //Memcpy(buf_tmp, buf, AES_BLOCKLEN);
  for (i = 0; i < length; i += AES_BLOCKLEN)
  {
    Memcpy(buf_tmp, buf, AES_BLOCKLEN, 0, i);
    XorWithIv(buf_tmp, Iv);
    Cipher(buf_tmp, ctxRoundKey, Nr);
    Memcpy(buf, buf_tmp, AES_BLOCKLEN, i, 0);
    Memcpy(Iv, buf, AES_BLOCKLEN, 0, i); //Iv = buf;
    //Printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  Memcpy(ctxIv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(ubyte ctxRoundKey[], ubyte ctxIv[AES_BLOCKLEN], ubyte buf[], uint32 length, AES_NR Nr)
{
  if (length % 16 != 0)
  {
    Printf("WARNING: Invalid buffer length (%d). Buffer length should be a multiple of 16.\n", length);
  }
  
  local uint32 i; // uintptr_t
  local ubyte storeNextIv[AES_BLOCKLEN];
  local ubyte buf_tmp[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
  {
    Memcpy(storeNextIv, buf, AES_BLOCKLEN, 0, i);
    Memcpy(buf_tmp, buf, AES_BLOCKLEN, 0, i);
    InvCipher(buf_tmp, ctxRoundKey, Nr);
    XorWithIv(buf_tmp, ctxIv);
    Memcpy(buf, buf_tmp, AES_BLOCKLEN, i, 0);
    Memcpy(ctxIv, storeNextIv, AES_BLOCKLEN);
  }
}



/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(ubyte ctxRoundKey[], ubyte ctxIv[AES_BLOCKLEN], ubyte buf[], uint32 length, AES_NR Nr)
{
  if (length % 16 != 0)
  {
    Printf("WARNING: Invalid buffer length (%d). Buffer length should be a multiple of 16.\n", length);
  }
  
  local ubyte buffer[AES_BLOCKLEN];
  
  local uint i;
  local int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
    {
      
      Memcpy(buffer, ctxIv, AES_BLOCKLEN);
      Cipher(buffer, ctxRoundKey, Nr);

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
      {
        /* inc will overflow */
        if (ctxIv[bi] == 255)
        {
          ctxIv[bi] = 0;
          continue;
        } 
        ctxIv[bi] += 1;
        break;   
      }
      bi = 0;
    }

    buf[i] = (buf[i] ^ buffer[bi]);
  }
}


void test_encrypt_cbc()
{
    local ubyte in_test_encrypt_cbc[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                      0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                      0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                      0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
    local const ubyte key_test_encrypt_cbc[AES128_KEY_LEN] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    local const ubyte iv_test_encrypt_cbc[AES_BLOCKLEN] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    local ubyte ctxRoundKey_test_encrypt_cbc[AES128_KEY_EXP_SIZE];
    local ubyte ctxIv_test_encrypt_cbc[AES_BLOCKLEN];
    local ubyte out_test_encrypt_cbc[64] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
                      0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                      0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                      0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
    Printf("Testing CBC encrypt... ");
    AES_init_ctx_iv(ctxRoundKey_test_encrypt_cbc, ctxIv_test_encrypt_cbc, key_test_encrypt_cbc, iv_test_encrypt_cbc, AES128_NK);
    AES_CBC_encrypt_buffer(ctxRoundKey_test_encrypt_cbc, ctxIv_test_encrypt_cbc, in_test_encrypt_cbc, 64, AES128_NR);
    if (Memcmp(in_test_encrypt_cbc, out_test_encrypt_cbc, 64) == 0)
    {
        Printf("Success!\n");
    }
    else
    {
        Printf("Failure\n");
    }
}

void test_decrypt_cbc()
{
    local ubyte in_test_decrypt_cbc[64] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
                      0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                      0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                      0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
    local const ubyte key_test_decrypt_cbc[AES128_KEY_LEN] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    local const ubyte iv_test_decrypt_cbc[AES_BLOCKLEN] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    local ubyte ctxRoundKey_test_decrypt_cbc[AES128_KEY_EXP_SIZE];
    local ubyte ctxIv_test_decrypt_cbc[AES_BLOCKLEN];
    local ubyte out_test_decrypt_cbc[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                      0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                      0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                      0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
    Printf("Testing CBC decrypt... ");
    AES_init_ctx_iv(ctxRoundKey_test_decrypt_cbc, ctxIv_test_decrypt_cbc, key_test_decrypt_cbc, iv_test_decrypt_cbc, AES128_NK);
    AES_CBC_decrypt_buffer(ctxRoundKey_test_decrypt_cbc, ctxIv_test_decrypt_cbc, in_test_decrypt_cbc, 64, AES128_NR);
    if (Memcmp(in_test_decrypt_cbc, out_test_decrypt_cbc, 64) == 0)
    {
        Printf("Success!\n");
    }
    else
    {
        Printf("Failure\n");
    }
}

void test_encrypt_ecb()
{
    local ubyte in_test_encrypt_ecb[16] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
    local const ubyte key_test_encrypt_ecb[AES128_KEY_LEN] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    local ubyte ctxRoundKey_test_encrypt_ecb[AES128_KEY_EXP_SIZE];
    local ubyte out_test_encrypt_ecb[16] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
    Printf("Testing ECB encrypt... ");
    AES_init_ctx(ctxRoundKey_test_encrypt_ecb, key_test_encrypt_ecb, AES128_NK);
    AES_ECB_encrypt(ctxRoundKey_test_encrypt_ecb, in_test_encrypt_ecb, AES128_NR);
    if (Memcmp(in_test_encrypt_ecb, out_test_encrypt_ecb, 16) == 0)
    {
        Printf("Success!\n");
    }
    else
    {
        Printf("Failure\n");
    }
}

void test_decrypt_ecb()
{
    local ubyte in_test_decrypt_ecb[16] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
    local const ubyte key_test_decrypt_ecb[AES128_KEY_LEN] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    local ubyte ctxRoundKey_test_decrypt_ecb[AES128_KEY_EXP_SIZE];
    local ubyte out_test_decrypt_ecb[16] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
    Printf("Testing ECB decrypt... ");
    AES_init_ctx(ctxRoundKey_test_decrypt_ecb, key_test_decrypt_ecb, AES128_NK);
    AES_ECB_decrypt(ctxRoundKey_test_decrypt_ecb, in_test_decrypt_ecb, AES128_NR);
    if (Memcmp(in_test_decrypt_ecb, out_test_decrypt_ecb, 16) == 0)
    {
        Printf("Success!\n");
    }
    else
    {
        Printf("Failure\n");
    }
}

void test_xcrypt_ctr()
{
    local ubyte in_test_xcrypt_ctr[64] = { 0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce,
                        0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b, 0xb9, 0xff, 0xfd, 0xff,
                        0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f, 0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab,
                        0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1, 0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee };
    local const ubyte key_test_xcrypt_ctr[AES128_KEY_LEN] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    local const ubyte iv_test_xcrypt_ctr[AES_BLOCKLEN] = { 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };
    local ubyte ctxRoundKey_test_xcrypt_ctr[AES128_KEY_EXP_SIZE];
    local ubyte ctxIv_test_xcrypt_ctr[AES_BLOCKLEN];
    local ubyte out_test_xcrypt_ctr[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
    Printf("Testing CTR encrypt... ");
    AES_init_ctx_iv(ctxRoundKey_test_xcrypt_ctr, ctxIv_test_xcrypt_ctr, key_test_xcrypt_ctr, iv_test_xcrypt_ctr, AES128_NK);
    AES_CTR_xcrypt_buffer(ctxRoundKey_test_xcrypt_ctr, ctxIv_test_xcrypt_ctr, in_test_xcrypt_ctr, 64, AES128_NR);
    if (Memcmp(in_test_xcrypt_ctr, out_test_xcrypt_ctr, 64) == 0)
    {
        Printf("Success!\n");
    }
    else
    {
        Printf("Failure\n");
    }
}

void test_all_AES_encryptions()
{
    test_encrypt_cbc();
    test_decrypt_cbc();
    test_encrypt_ecb();
    test_decrypt_ecb();
    test_xcrypt_ctr();
}

#endif // _SP_CRYPTO_AES_BT