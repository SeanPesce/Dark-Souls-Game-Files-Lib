//----------------------------------------------------------------------------
//--- 010 Editor Binary Template
//
// File: BreakObj.bt
// Author: Sean Pesce
// Revision: 1
// Purpose: Parsing Dark Souls *.breakobj files
//----------------------------------------------------------------------------
#ifndef _SP_BREAK_OBJ_BT
    #define _SP_BREAK_OBJ_BT

//#define SP_DEBUG

#include "Utility.bt"


// Maximum number of entries found in a vanilla DS1 .breakobj file
#define MAX_BREAK_OBJ_ENTRIES 517


/* Unknown data chunk */
typedef struct (uint64 size) {
    ubyte data[size];
} BLOB;



// File signature
typedef struct
{
    char   BJBO[4]; // Always "BJBO"
    uint32 version <format=hex, comment="Always 0x8051701">; // Might not be version, but this value is constant and verified at run-time (DARKSOULS.exe+0xA941EA)
} BreakObjSignature <read=read_breakobj_signature>;


string read_breakobj_signature(BreakObjSignature& sig)
{
    local string tmp_breakobj_sig;
    SPrintf(tmp_breakobj_sig, "\"%s\"    0x%x", sig.BJBO, sig.version);
    return tmp_breakobj_sig;
}



// Main file header structure
typedef struct
{
    BreakObjSignature signature <bgcolor=0x7AA3E8>;
    uint32 subheader_bit_count <comment=read_breakobj_subheader_size>; // Each subheader bit is a flag indicating whether this file contains a corresponding segment
    // Note: Number of 1 bits corresponds to number of entries in the file
    byte flags[get_subheader_size(subheader_bit_count)] <bgcolor=0xC6C9CE>;
} BreakObjHeader;


// File header utility functions
uint get_subheader_size(uint32 modifier)
{
    return ((modifier + 7) / 8);
}

string read_breakobj_subheader_size(uint32 modifier)
{
    return "Subheader size = " + uint32_to_string(get_subheader_size(modifier)) + " bytes";
}



// Structure parsing instructions:
// PtDE: DARKSOULS.exe+AD0BD5  -  0F BE 0E  -  movsx ecx,byte ptr [esi]
// DSR:  0x1402ACC3B to 0x1402ACE1C; final coordinates (allegedly) stored in xmm3
typedef struct
{
    local uint64 file_offset = FTell();
    byte unknown0 <fgcolor=0x8C8C8C, read=vec_ubyte_to_float>;
    byte v_rot <fgcolor=cBlue, read=vec_ubyte_to_float>;
    byte h_rot <fgcolor=cBlue, read=vec_ubyte_to_float>;
    //ubyte x <fgcolor=cDkPurple, read=vec_ubyte_to_float>; // x? magnitude?
    byte unknown1 <fgcolor=0x8C8C8C, read=vec_ubyte_to_float, comment="x?">; // flags? x?
    byte x <fgcolor=cDkPurple, read=vec_ubyte_to_float>; // x? magnitude?
    byte y <fgcolor=cDkPurple, read=vec_ubyte_to_float>; // Vertical position/offset: Y = (y - 127.0f) / 127.0f
    byte z <fgcolor=cDkPurple, read=vec_ubyte_to_float>;
    byte w <fgcolor=cDkPurple, read=vec_ubyte_to_float>; // Magnitude/scaling (?)
} BreakObjFragment <optimize=false, bgcolor=0xEEFFDD, read=read_breakobj_fragment>;


// B3LYP's technique for reading positional vec8
string read_breakobj_fragment1(BreakObjFragment& f) {
    local string s;
    local uint32 dw1 = ReadUInt(f.file_offset);
    local uint32 dw2 = ReadUInt(f.file_offset+4);
    local int32  v4  = (((dw2 & 7) | dw1) >> 15) & 0x1FFF8;
    local float  f0  = (float)((dw1 << 14) >> 14) * 0.01f;
    local float  f1  = (float)((((v4 << 15) | v4) >> 2) >> 15) * 0.01f;
    local float  f2  = (float)(((dw2 >> 3) << 14) >> 14) * 0.01f;
    local float  f3  = (float)(3.14f * (1.0f / 64.0f)) * ((float)(dw2 >> 25) - 64.0f);
    SPrintf(s, "%f  %f  %f  %f", f0, f1, f2, f3);
    return s;
}

Printf("@TODO: Finish read_breakobj_fragment()\n");
string read_breakobj_fragment(BreakObjFragment& f) {
    local string s;
    local float  modifier = (((float)f.v_rot * 0.01f) * ((float)f.v_rot * 0.01f));
    local float  rot0 = ((1.0f - (((float)f.unknown0 * 0.01f) * ((float)f.unknown0 * 0.01f))) - modifier);
    SPrintf(s, "%f  %f  ", modifier, rot0);
    return s;
}


string vec_byte_to_float(byte b) {
    local string s;
    SPrintf(s, "%f", (float)((float)b-(float)127.0f)/(float)127.0f); // This conversion is probably wrong
    return s;
}

string vec_ubyte_to_float(ubyte b) {
    local string s;
    SPrintf(s, "%f", (float)((float)b-(float)127.0f)/(float)127.0f); // This conversion is probably wrong
    return s;
}


// Main data structure definition
typedef struct (uint size)
{
    local uint start_pos = FTell();
    size -= 2; // Adjust for first 2 bytes parsed in parent structure
    
    ubyte fragment_count <bgcolor=0xFFCFB2>;
    BreakObjFragment fragments[fragment_count] <optimize=false>;
    
    //size -= (FTell() - start_pos);
    //byte unknown_data[size];
} BreakObjEntry <optimize=false>;



// Data container structure definition
typedef struct
{
    // Flags & lower 5 bits of size are stored in a single byte, like so (f=flag bit, s=size bit):
    // sssssfff
    ubyte flags_and_size_high_bits <bgcolor=0xFFCFB2, fgcolor=0x8C8C8C, hidden=true>;
    local ubyte flags[3];
    flags[0] = flags_and_size_high_bits & 1;
    flags[1] = flags_and_size_high_bits & 2;
    flags[2] = flags_and_size_high_bits & 4;
    
    local uint size_low_pos = FTell();
    ubyte size_low_bits <bgcolor=0xFFCFB2, fgcolor=0x8C8C8C, hidden=true>;
    local uint size <bgcolor=0xFFCFB2, hidden=false> = get_breakobj_group_size(flags_and_size_high_bits, size_low_bits);
    
    BreakObjEntry entry_data(size);
    
} BreakObjGroup <optimize=false, read=get_breakobj_group_description>;


// Data container utility functions
uint get_breakobj_group_size(ubyte high_bits, ubyte low_bits)
{
    local uint tmp_breakobj_group_size = high_bits;
    //tmp_breakobj_group_size >>= 3;
    //tmp_breakobj_group_size <<= 8;
    tmp_breakobj_group_size /= 8; // 2^3
    tmp_breakobj_group_size *= 256; // 2^8
    tmp_breakobj_group_size |= low_bits;
    return tmp_breakobj_group_size;
}


string get_breakobj_group_description(BreakObjGroup& g)
{
    return "Size=" + uint_to_string(g.size) + " bytes        Flags: " + ubyte_to_string(g.flags[0]) + " " + ubyte_to_string(g.flags[1]) + " " + ubyte_to_string(g.flags[2]);
}




// Check for valid header signature
if (ReadString(0,4) != "BJBO")
{
    Printf("WARNING - SIGNATURE MISMATCH: File might not be a valid .breakobj file\n");
}
if (ReadUInt(4) != 0x8051701)
{
    Printf("WARNING - VERSION MISMATCH:   File might not be a valid .breakobj file\n");
}


// Total number of data entries stored as a string
local string total_entry_count_str;


// Parse file header
BreakObjHeader header<read=read_total_entry_count>;


// Count data containers before parsing
local uint32 post_header_offset = FTell();
local uint   group_count = 0;
while (post_header_offset < FileSize())
{
    post_header_offset += get_breakobj_group_size(ReadUByte(post_header_offset), ReadUByte(post_header_offset+1));
    group_count++;
}


// Parse main file data
if (group_count > 0)
{
    BreakObjGroup data[group_count];
}


// Store total number of data entries as a string
SPrintf(total_entry_count_str, "%u entries", group_count);
string read_total_entry_count(BreakObjHeader& dummy_arg)
{
    return total_entry_count_str;
}


// Check that all bytes were parsed
if (FTell() < FileSize())
{
    Printf("WARNING: %u bytes of unparsed data at EOF.\n", FileSize()-FTell());
}


#endif // _SP_BREAK_OBJ_BT