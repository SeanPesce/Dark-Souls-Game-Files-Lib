//----------------------------------------------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: Sl2/USER_DATA_Remaster.bt
// Author: Tarvitz, Sean Pesce, & B3LYP
// Revision: 0.0.1
// Purpose: Parsing Dark Souls: Remastered save files (*.sl2)
//----------------------------------------------------------------------------
#ifndef _DSR_SL2_USER_DATA_REMASTER_BT
    #define _DSR_SL2_USER_DATA_REMASTER_BT

#include "Bnd4.bt"
#include "Character.bt"
#include "Backpack.bt"
#include "Unknown.bt"
#include "../Online.bt"
#include "MainMenu.bt"
#include "../Enum/Location.bt"
#include "../Enum/Character.bt"


typedef struct {
    local int backpack_amount = 2048; // Is this a hard-coded constant? // I don't know, we could try filling the backpack 
    //                                   with 2047 items and see what happens when we try to pick up another. If it refuses
    //                                   it's constant, if it dynamically resizes the pack then we know

    local string header_hash_start = "";
    local string footer_hash_start = "";
    local string header_hash_calculated = "";
    local string footer_hash_calculated = "";
    local string header_hash_recalculated = ""; // Only used if existing footer hash was invalid (header hash is calculated using footer hash)
    //local ubyte hash_verified[2] = GetChecksumStrings(FTell() + 20, (uint64)ReadUInt(FTell() + 16),
    //                                meta.chunks[slots+1].start - (16 + meta.chunks[slots].space_size),
    //                                header_hash_start, footer_hash_start, header_hash_calculated,
    //                                footer_hash_calculated, header_hash_recalculated); // @REMASTER_CHANGE: Commented out

    //if (hash_verified[0] == 0) { // @REMASTER_CHANGE: Commented out
    //    SetForeColor(cRed);
    //}
    Checksum header(16); // This is written after the MD5 in the footer of the save slot is written, it includes all parts of the save slot except for the ChecksumHeader
    //SetForeColor(cNone); // @REMASTER_CHANGE: Commented out
    
    uint length <read=GetDecAndHexValuesUInt, fgcolor=cWhite, bgcolor=cLtBlue>; // Number of bytes that should be included in the checksum, 393216 ( Entire slot is 393248 )
    uint unknown_a[2];
    uint playtime <read=GetTimeStamp, comment="Time in milliseconds; maxes out at 999:59:59:000 (3599999000)">; // Milliseconds since game start (verified); maxes out at 3599999000 (999:59:59)
    StatsUnknown1 unknown(1) <comment="Unknown data">;

    Stats stats;
    
    Pack pack(1);

    uint backpack_items_amount;
    uint backpack_keys_amount;
    uint backpack_size;
    // 0-63 indexes for utils box
    local uint utilbox_size = 64;
    local uint itembox_size = 0;
    if(backpack_size > 0 && backpack_size >= utilbox_size) {
        itembox_size = backpack_size - utilbox_size;
    }

    // Warning: If you've dropped an item, there may be blank items interleaved among the existing
    // items and some items will be pushed into the empty part of the box display
    PartiallyUsedBox util_box(utilbox_size,backpack_keys_amount);
    PartiallyUsedBox item_box(itembox_size,backpack_items_amount);

    uint lastindex; // Item with the highest index // Whatever that means? Not tested
    Attuned attunementslots[12];
    uint UnknownData1; // Going from hydra, to beating Ornstein & Smough, this changed from 1 to 0

    uint equippedItems[5]; // Could these also be the index-remember-previous-selection feature?

    UnknownTuple UnknownData2[10]<bgcolor=cLtYellow>;

    Color hair; // @ address: 0xE644
    Color eye; 
    CharacterParams creationdata;

    BottomlessBox box[backpack_amount];

    Gestures gestures;

    // End part of the play-through (NG+) counter looks like it's almost in a box struct?
    UnknownBlob1 playthrough_counter;
    UnknownBox unknown_box[64];
    UnknownStruct unknown_box_2[120];

    UnknownBlob2 counters;


    // Section length = 0x500
    BonfireSection firstsection;
    UnknownBulkSection unknownSections[72];
    //unknownSection[2].marker[8] Includes the bit that unlocks the Undead Burg ladder shortcut. Bit 0x08 if my calculations are correct
    //unknownSection[2].marker[91] 0A-08 indicates whether Sunlight Altar bonfire has been lit?

    // @REMASTER_CHANGE: Dynamic zerofill length didn't exist before
    local uint zerofill_length = 0;
    while (ReadUInt(FTell()+zerofill_length) != 0x43485220) { // AKA " RHC" or 1128813088
        zerofill_length++;
    }
    byte zerofill[zerofill_length-4] <bgcolor=cWhite,fgcolor=cGreen>; // @REMASTER_CHANGE: Changed this from zerofill[10] to zerofill[zerofill_length-4]

    local uint mark = FTell();

    OnlineData online;

    // Dynamic length zero pad; skip to next part with numbers
    FSeek(mark + 131242);

    //0x56280 Undead Burg bonfire?
    UnknownArea areadata[2560] <fgcolor=cGray, bgcolor=cWhite>;  // I'm getting indications that this is just garbage data? // @REMASTER_CHANGE: 2578 to 2560 (prob change back to 2578 for full sl2 file)
    //if (hash_verified[1] == 0) { // @REMASTER_CHANGE: Commented out
    //    SetForeColor(cRed);
    //}
    //Checksum footer(16); // MD5 checksum of all bytes in this save slot (excluding header and length fields) // @REMASTER_CHANGE: Commented out
    //SetForeColor(cNone); // @REMASTER_CHANGE: Commented out
    // Secondary checksum isn't actually required to be correct to form a valid save file; save file loads despite it being edited.

    //ubyte offset[meta.chunks[slots].space_size] <bgcolor=cWhite>; // @REMASTER_CHANGE: Commented out
} SaveSlotRemaster </*read=GetChecksumStatus,*/ name=GetRemasterSlotCharName/*, comment=GetChecksumCorrection*/>; // @REMASTER_CHANGE: Commented out read/comment; changed GetSlotCharName to GetRemasterSlotCharName

string GetRemasterSlotCharName(SaveSlotRemaster &s) {
    return "SaveSlot (\"" + WStringToString(s.stats.name) + "\")";
}

SaveSlotRemaster user_data;

#endif // _DSR_SL2_USER_DATA_REMASTER_BT